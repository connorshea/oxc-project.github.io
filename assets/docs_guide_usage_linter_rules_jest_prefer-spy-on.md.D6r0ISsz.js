import{_ as r,c as o,j as s,a as e,I as a,w as l,a4 as h,E as i,o as p}from"./chunks/framework.D6UG3LSr.js";const v=JSON.parse('{"title":"jest/prefer-spy-on","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/jest/prefer-spy-on.md","filePath":"docs/guide/usage/linter/rules/jest/prefer-spy-on.md"}'),k={name:"docs/guide/usage/linter/rules/jest/prefer-spy-on.md"},c={id:"jest-prefer-spy-on",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#jest-prefer-spy-on","aria-label":'Permalink to "jest/prefer-spy-on <Badge type="info" text="Style" />"'},"‚Äã",-1),E={class:"rule-meta"},g=s("span",{class:"emoji"},"üõ†Ô∏è",-1),y=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>When mocking a function by overwriting a property you have to manually restore the original implementation when cleaning up. When using <code>jest.spyOn()</code> Jest keeps track of changes, and they can be restored with <code>jest.restoreAllMocks()</code>, <code>mockFn.mockRestore()</code> or by setting <code>restoreMocks</code> to <code>true</code> in the Jest config.</p><p>Note: The mock created by <code>jest.spyOn()</code> still behaves the same as the original function. The original function can be overwritten with <code>mockFn.mockImplementation()</code> or by some of the <a href="https://jestjs.io/docs/en/mock-function-api" target="_blank" rel="noreferrer">other mock functions</a>.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// invalid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date.now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Date.now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// valid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spyOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Date, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;now&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spyOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Date, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;now&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mockImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/jest/prefer_spy_on.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>`,7);function u(f,m,_,b,F,j){const t=i("Badge"),n=i("Alert");return p(),o("div",null,[s("h1",c,[e("jest/prefer-spy-on "),a(t,{type:"info",text:"Style"}),e(),d]),s("div",E,[a(n,{class:"fix",type:"info"},{default:l(()=>[g,e(" An auto-fix is available for this rule. ")]),_:1})]),y])}const C=r(k,[["render",u]]);export{v as __pageData,C as default};

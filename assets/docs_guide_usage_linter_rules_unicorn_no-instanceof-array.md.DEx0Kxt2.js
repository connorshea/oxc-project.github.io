import{_ as r,c as o,j as a,a as e,I as s,w as l,a4 as c,E as i,o as h}from"./chunks/framework.Qpa4gud8.js";const v=JSON.parse('{"title":"unicorn/no-instanceof-array","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/no-instanceof-array.md","filePath":"docs/guide/usage/linter/rules/unicorn/no-instanceof-array.md"}'),d={name:"docs/guide/usage/linter/rules/unicorn/no-instanceof-array.md"},p={id:"unicorn-no-instanceof-array",tabindex:"-1"},k=a("a",{class:"header-anchor",href:"#unicorn-no-instanceof-array","aria-label":'Permalink to "unicorn/no-instanceof-array <Badge type="info" text="Pedantic" />"'},"‚Äã",-1),u={class:"rule-meta"},f=a("span",{class:"emoji"},"üõ†Ô∏è",-1),_=c(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>Require <code>Array.isArray()</code> instead of <code>instanceof Array</code>.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>The instanceof Array check doesn&#39;t work across realms/contexts, for example, frames/windows in browsers or the vm module in Node.js.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">‚Äã</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/unicorn/no_instanceof_array.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>`,8);function y(E,g,m,b,x,A){const t=i("Badge"),n=i("Alert");return h(),o("div",null,[a("h1",p,[e("unicorn/no-instanceof-array "),s(t,{type:"info",text:"Pedantic"}),e(),k]),a("div",u,[s(n,{class:"fix",type:"info"},{default:l(()=>[f,e(" An auto-fix is available for this rule. ")]),_:1})]),_])}const F=r(d,[["render",y]]);export{v as __pageData,F as default};

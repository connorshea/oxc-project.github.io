import{d as l}from"./chunks/version.data.BJ0D6ZyH.js";import{C as i,c as p,o as h,j as a,ag as c,a as e,G as n,w as d}from"./chunks/framework.Az7Yw7dm.js";const k={id:"unicorn-prefer-logical-operator-over-ternary",tabindex:"-1"},g={class:"rule-meta"},v=JSON.parse('{"title":"unicorn/prefer-logical-operator-over-ternary","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md"}'),u={name:"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md"},m=Object.assign(u,{setup(E){const t=`https://github.com/oxc-project/oxc/blob/${l}/crates/oxc_linter/src/rules/unicorn/prefer_logical_operator_over_ternary.rs`;return(y,s)=>{const r=i("Badge"),o=i("Alert");return h(),p("div",null,[a("h1",k,[s[0]||(s[0]=e("unicorn/prefer-logical-operator-over-ternary ")),n(r,{type:"info",text:"Style"}),s[1]||(s[1]=e()),s[2]||(s[2]=a("a",{class:"header-anchor",href:"#unicorn-prefer-logical-operator-over-ternary","aria-label":'Permalink to "unicorn/prefer-logical-operator-over-ternary <Badge type="info" text="Style" />"'},"â€‹",-1))]),a("div",g,[n(o,{class:"fix",type:"info"},{default:d(()=>s[3]||(s[3]=[a("span",{class:"emoji"},"ðŸš§",-1),e(" An auto-fix is still under development. ")])),_:1})]),s[4]||(s[4]=c(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">â€‹</a></h3><p>This rule finds ternary expressions that can be simplified to a logical operator.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">â€‹</a></h3><p>Using a logical operator is shorter and simpler than a ternary expression.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">â€‹</a></h3><p>Examples of <strong>incorrect</strong> code for this rule:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar);</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule: const foo = bar || baz; console.log(foo ?? bar);</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>## How to use</span></span>
<span class="line"><span></span></span>
<span class="line"><span>To **enable** this rule in the CLI or using the config file, you can use:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>::: code-group</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`bash [CLI]</span></span>
<span class="line"><span>oxlint --deny unicorn/prefer-logical-operator-over-ternary</span></span></code></pre></div><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="Config (.oxlintrc.json)">Config (.oxlintrc.json)</span></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;unicorn/prefer-logical-operator-over-ternary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><p>:::</p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">â€‹</a></h2>`,12)),a("ul",null,[a("li",null,[a("a",{href:t,target:"_blank",rel:"noreferrer"},"Rule Source")])])])}}});export{v as __pageData,m as default};

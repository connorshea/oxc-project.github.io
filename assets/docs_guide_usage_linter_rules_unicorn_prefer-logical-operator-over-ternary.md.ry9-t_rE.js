import{_ as o,c as n,j as a,a as e,I as s,w as l,a4 as p,E as i,o as c}from"./chunks/framework.Qpa4gud8.js";const C=JSON.parse('{"title":"unicorn/prefer-logical-operator-over-ternary","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md","filePath":"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md"}'),h={name:"docs/guide/usage/linter/rules/unicorn/prefer-logical-operator-over-ternary.md"},d={id:"unicorn-prefer-logical-operator-over-ternary",tabindex:"-1"},g=a("a",{class:"header-anchor",href:"#unicorn-prefer-logical-operator-over-ternary","aria-label":'Permalink to "unicorn/prefer-logical-operator-over-ternary <Badge type="info" text="Style" />"'},"â€‹",-1),k={class:"rule-meta"},u=a("span",{class:"emoji"},"ðŸš§",-1),_=p(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">â€‹</a></h3><p>This rule finds ternary expressions that can be simplified to a logical operator.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">â€‹</a></h3><p>Using a logical operator is shorter and simpler than a ternary expression.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">â€‹</a></h3><p>Examples of <strong>incorrect</strong> code for this rule:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar);</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule: const foo = bar || baz; console.log(foo ?? bar);</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>## References</span></span>
<span class="line"><span>- [Rule Source](https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/unicorn/prefer_logical_operator_over_ternary.rs)</span></span></code></pre></div>`,9);function f(y,E,b,m,v,x){const t=i("Badge"),r=i("Alert");return c(),n("div",null,[a("h1",d,[e("unicorn/prefer-logical-operator-over-ternary "),s(t,{type:"info",text:"Style"}),e(),g]),a("div",k,[s(r,{class:"fix",type:"info"},{default:l(()=>[u,e(" An auto-fix is still under development. ")]),_:1})]),_])}const F=o(h,[["render",f]]);export{C as __pageData,F as default};

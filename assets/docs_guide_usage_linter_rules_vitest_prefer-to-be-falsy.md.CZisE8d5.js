import{_ as n,c as r,j as e,a as s,I as a,w as o,a4 as h,E as i,o as p}from"./chunks/framework.Qpa4gud8.js";const v=JSON.parse('{"title":"vitest/prefer-to-be-falsy","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/vitest/prefer-to-be-falsy.md","filePath":"docs/guide/usage/linter/rules/vitest/prefer-to-be-falsy.md"}'),d={name:"docs/guide/usage/linter/rules/vitest/prefer-to-be-falsy.md"},c={id:"vitest-prefer-to-be-falsy",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#vitest-prefer-to-be-falsy","aria-label":'Permalink to "vitest/prefer-to-be-falsy <Badge type="info" text="Style" />"'},"‚Äã",-1),f={class:"rule-meta"},y=e("span",{class:"emoji"},"üõ†Ô∏è",-1),E=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>This rule warns when <code>toBe(false)</code> is used with <code>expect</code> or <code>expectTypeOf</code>. With <code>--fix</code>, it will be replaced with <code>toBeFalsy()</code>.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">‚Äã</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bad</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeFalsy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeFalsy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/vitest/prefer_to_be_falsy.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>`,6);function _(g,u,b,x,m,F){const t=i("Badge"),l=i("Alert");return p(),r("div",null,[e("h1",c,[s("vitest/prefer-to-be-falsy "),a(t,{type:"info",text:"Style"}),s(),k]),e("div",f,[a(l,{class:"fix",type:"info"},{default:o(()=>[y,s(" An auto-fix is available for this rule. ")]),_:1})]),E])}const C=n(d,[["render",_]]);export{v as __pageData,C as default};

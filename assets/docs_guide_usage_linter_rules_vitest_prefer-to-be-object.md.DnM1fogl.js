import{_ as n,c as r,j as e,a as s,I as t,w as l,a4 as h,E as a,o as c}from"./chunks/framework.Qpa4gud8.js";const B=JSON.parse('{"title":"vitest/prefer-to-be-object","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/usage/linter/rules/vitest/prefer-to-be-object.md","filePath":"docs/guide/usage/linter/rules/vitest/prefer-to-be-object.md"}'),p={name:"docs/guide/usage/linter/rules/vitest/prefer-to-be-object.md"},d={id:"vitest-prefer-to-be-object",tabindex:"-1"},k=e("a",{class:"header-anchor",href:"#vitest-prefer-to-be-object","aria-label":'Permalink to "vitest/prefer-to-be-object <Badge type="info" text="Style" />"'},"‚Äã",-1),b={class:"rule-meta"},f=e("span",{class:"emoji"},"üõ†Ô∏è",-1),g=h(`<h3 id="what-it-does" tabindex="-1">What it does <a class="header-anchor" href="#what-it-does" aria-label="Permalink to &quot;What it does&quot;">‚Äã</a></h3><p>This rule enforces using <code>toBeObject()</code> to check if a value is of type <code>Object</code>.</p><h3 id="why-is-this-bad" tabindex="-1">Why is this bad? <a class="header-anchor" href="#why-is-this-bad" aria-label="Permalink to &quot;Why is this bad?&quot;">‚Äã</a></h3><p>Using other methods such as <code>toBeInstanceOf(Object)</code> or <code>instanceof Object</code> can be less clear and potentially misleading. Enforcing the use of <code>toBeObject()</code> provides more explicit and readable code, making your intentions clear and improving the overall maintainability and readability of your tests.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">‚Äã</a></h3><p>Examples of <strong>incorrect</strong> code for this rule:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeInstanceOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeTruthy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Examples of <strong>correct</strong> code for this rule:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expectTypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">‚Äã</a></h2><ul><li><a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_linter/src/rules/vitest/prefer_to_be_object.rs" target="_blank" rel="noreferrer">Rule Source</a></li></ul>`,11);function u(E,y,_,m,x,v){const i=a("Badge"),o=a("Alert");return c(),r("div",null,[e("h1",d,[s("vitest/prefer-to-be-object "),t(i,{type:"info",text:"Style"}),s(),k]),e("div",b,[t(o,{class:"fix",type:"info"},{default:l(()=>[f,s(" An auto-fix is available for this rule. ")]),_:1})]),g])}const F=n(p,[["render",u]]);export{B as __pageData,F as default};

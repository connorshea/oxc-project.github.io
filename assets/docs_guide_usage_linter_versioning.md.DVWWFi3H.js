import{createElementBlock as e,createStaticVNode as t,openBlock as n}from"./chunks/runtime-core.esm-bundler.CtuuehPY.js";import{__plugin_vue_export_helper_default as r}from"./chunks/plugin-vue_export-helper.D9UzszKp.js";const i=JSON.parse(`{"title":"Versioning","description":"","frontmatter":{"outline":[2,3],"editLink":false},"headers":[],"relativePath":"docs/guide/usage/linter/versioning.md","filePath":"docs/guide/usage/linter/versioning.md"}`),a={name:`docs/guide/usage/linter/versioning.md`};function o(r,i,a,o,s,c){return n(),e(`div`,null,i[0]||=[t(`<h1 id="versioning" tabindex="-1">Versioning <a class="header-anchor" href="#versioning" aria-label="Permalink to &quot;Versioning&quot;">​</a></h1><p>Oxlint follows semantic versioning, with the goal of providing clarity and predictability as you upgrade.</p><p>What&#39;s considered a <strong>breaking</strong> change:</p><ul><li>Changes to the CLI interface that would break existing workflows.</li><li>Changes to the configuration file (<code>.oxlintrc.json</code>).</li><li>Renaming or removing a rule.</li></ul><p>What&#39;s considered a <strong>non-breaking</strong> change:</p><ul><li>Adding new lint rules.</li><li>Changing the default configuration for a rule.</li><li>Improving rule descriptions or diagnostic messages.</li></ul><h2 id="are-new-lint-errors-a-breaking-change" tabindex="-1">Are New Lint Errors a Breaking Change? <a class="header-anchor" href="#are-new-lint-errors-a-breaking-change" aria-label="Permalink to &quot;Are New Lint Errors a Breaking Change?&quot;">​</a></h2><p>If a new version of Oxlint reports additional issues in your code, that’s expected. This behavior means Oxlint has improved — not that something in your project broke. New errors reflect stronger analysis, not a broken upgrade.</p><h2 id="what-to-expect-from-new-versions" tabindex="-1">What to Expect from New Versions <a class="header-anchor" href="#what-to-expect-from-new-versions" aria-label="Permalink to &quot;What to Expect from New Versions&quot;">​</a></h2><ul><li><strong>Patch version</strong> (1.0.x): Bug fixes, performance improvements, internal refactors. These are always safe to upgrade.</li><li><strong>Minor version</strong> (1.x.0): New rules, better diagnostics, new features. These are not considered breaking changes even if they cause new errors to appear in your codebase.</li><li><strong>Major version</strong> (x.0.0): Reserved for breaking changes to the CLI or configuration format.</li></ul>`,10)])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
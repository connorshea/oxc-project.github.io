import{C as e,k as t,n}from"./chunks/runtime-core.esm-bundler.BwO2dwxE.js";import{b as r}from"./chunks/plugin-vue_export-helper.CZQmzSAq.js";const i=JSON.parse(`{"title":"Transformer","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Transformer"}],["meta",{"name":"twitter:title","content":"Transformer"}],["meta",{"property":"og:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"name":"twitter:description","content":"A collection of high-performance JavaScript tools written in Rust"}],["meta",{"property":"og:url","content":"https://oxc.rs/docs/guide/usage/transformer.html"}]]},"headers":[],"relativePath":"docs/guide/usage/transformer.md","filePath":"docs/guide/usage/transformer.md"}`),a={name:`docs/guide/usage/transformer.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,[...i[0]||=[n(`<h1 id="transformer" tabindex="-1">Transformer <a class="header-anchor" href="#transformer" aria-label="Permalink to “Transformer”">​</a></h1><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to “Features”">​</a></h2><ul><li>Transforming TypeScript to ESNext.</li><li>Transforming React JSX to ESNext, with built-in React Refresh.</li><li><a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/#isolated-declarations" target="_blank" rel="noreferrer">TypeScript Isolated Declarations Emit</a> without using the TypeScript compiler.</li><li>Built-in support for popular plugins like styled-components.</li></ul><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to “Installation”">​</a></h2><h3 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to “Node.js”">​</a></h3><ul><li>Use the node binding <a href="https://www.npmjs.com/package/oxc-transform" target="_blank" rel="noreferrer">oxc-transform</a>.</li><li>Try on <a href="https://stackblitz.com/edit/oxc-transform" target="_blank" rel="noreferrer">stackblitz</a>.</li></ul><h3 id="rust" tabindex="-1">Rust <a class="header-anchor" href="#rust" aria-label="Permalink to “Rust”">​</a></h3><p>Use the umbrella crate <a href="https://docs.rs/oxc" target="_blank" rel="noreferrer">oxc</a> with the <code>transformer</code> feature.</p><p>Rust usage example can be found <a href="https://github.com/oxc-project/oxc/blob/main/crates/oxc_transformer/examples/transformer.rs" target="_blank" rel="noreferrer">here</a>.</p><h2 id="isolated-declarations" tabindex="-1">Isolated Declarations <a class="header-anchor" href="#isolated-declarations" aria-label="Permalink to “Isolated Declarations”">​</a></h2><ul><li><a href="https://github.com/unplugin/unplugin-isolated-decl" target="_blank" rel="noreferrer"><code>unplugin-isolated-decl</code></a></li></ul><h2 id="built-in-plugins" tabindex="-1">Built-in Plugins <a class="header-anchor" href="#built-in-plugins" aria-label="Permalink to “Built-in Plugins”">​</a></h2><p>Oxc transformer includes built-in support for popular transformation plugins to improve developer experience and build performance.</p><h3 id="react-refresh" tabindex="-1">React Refresh <a class="header-anchor" href="#react-refresh" aria-label="Permalink to “React Refresh”">​</a></h3><p>React Refresh (also known as React Fast Refresh) provides hot reloading capabilities for React components during development. This plugin automatically instruments React components to preserve state during development.</p><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to “Usage”">​</a></h4><p>React Refresh is automatically enabled when transforming JSX code in development mode. To configure it explicitly:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;App.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sourceCode, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  jsx: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    plugin: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    development: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enables React Refresh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    refresh: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      refreshReg: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$RefreshReg$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      refreshSig: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$RefreshSig$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      emitFullSignatures: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to “Configuration Options”">​</a></h4><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>refreshReg</code></td><td><code>string</code></td><td><code>&quot;$RefreshReg$&quot;</code></td><td>The name of the function to register components for refresh</td></tr><tr><td><code>refreshSig</code></td><td><code>string</code></td><td><code>&quot;$RefreshSig$&quot;</code></td><td>The name of the function to create signatures for refresh</td></tr><tr><td><code>emitFullSignatures</code></td><td><code>boolean</code></td><td><code>false</code></td><td>Whether to emit full signatures for better debugging</td></tr></tbody></table><h3 id="styled-components" tabindex="-1">Styled Components <a class="header-anchor" href="#styled-components" aria-label="Permalink to “Styled Components”">​</a></h3><p>The styled-components plugin adds comprehensive support for styled-components with server-side rendering, style minification, and enhanced debugging capabilities.</p><h4 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to “Basic Usage”">​</a></h4><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { transform } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oxc-transform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Component.jsx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sourceCode, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    styledComponents: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      displayName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ssr: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fileName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      minify: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to “Example”">​</a></h4><p><strong>Input:</strong></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;styled-components&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">div</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  color: blue;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  padding: 10px;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>Output (with default options):</strong></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;styled-components&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Button</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled.div.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  displayName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  componentId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sc-1234567-0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;color:blue;padding:10px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span></code></pre></div><h4 id="configuration-options-1" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options-1" aria-label="Permalink to “Configuration Options”">​</a></h4><h5 id="core-options" tabindex="-1">Core Options <a class="header-anchor" href="#core-options" aria-label="Permalink to “Core Options”">​</a></h5><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>displayName</code></td><td><code>boolean</code></td><td><code>true</code></td><td>Enhances the attached CSS class name with component names for easier debugging</td></tr><tr><td><code>ssr</code></td><td><code>boolean</code></td><td><code>true</code></td><td>Adds unique component IDs to avoid checksum mismatches during server-side rendering</td></tr><tr><td><code>fileName</code></td><td><code>boolean</code></td><td><code>true</code></td><td>Controls whether the displayName is prefixed with the filename</td></tr></tbody></table><h5 id="template-literal-options" tabindex="-1">Template Literal Options <a class="header-anchor" href="#template-literal-options" aria-label="Permalink to “Template Literal Options”">​</a></h5><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>transpileTemplateLiterals</code></td><td><code>boolean</code></td><td><code>true</code></td><td>Converts template literals to a smaller representation for reduced bundle size</td></tr><tr><td><code>minify</code></td><td><code>boolean</code></td><td><code>true</code></td><td>Minifies CSS content by removing whitespace and comments</td></tr></tbody></table><h5 id="advanced-options" tabindex="-1">Advanced Options <a class="header-anchor" href="#advanced-options" aria-label="Permalink to “Advanced Options”">​</a></h5><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>pure</code></td><td><code>boolean</code></td><td><code>false</code></td><td>Adds <code>/*#__PURE__*/</code> comments for better tree-shaking</td></tr><tr><td><code>namespace</code></td><td><code>string</code></td><td><code>undefined</code></td><td>Adds a namespace prefix to component IDs</td></tr><tr><td><code>meaninglessFileNames</code></td><td><code>string[]</code></td><td><code>[&quot;index&quot;]</code></td><td>List of filenames considered meaningless for component naming</td></tr></tbody></table><h5 id="not-yet-implemented" tabindex="-1">Not Yet Implemented <a class="header-anchor" href="#not-yet-implemented" aria-label="Permalink to “Not Yet Implemented”">​</a></h5><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>cssProp</code></td><td><code>boolean</code></td><td><code>true</code></td><td>JSX css prop transformation (planned)</td></tr><tr><td><code>topLevelImportPaths</code></td><td><code>string[]</code></td><td><code>[]</code></td><td>Custom import path handling (planned)</td></tr></tbody></table><h4 id="supported-import-patterns" tabindex="-1">Supported Import Patterns <a class="header-anchor" href="#supported-import-patterns" aria-label="Permalink to “Supported Import Patterns”">​</a></h4><p>The plugin works with various styled-components import patterns:</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default import</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;styled-components&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Namespace import</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;styled-components&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Named imports</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createGlobalStyle, css, keyframes } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;styled-components&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Native and primitives</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;styled-components/native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> styled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;styled-components/primitives&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="features-1" tabindex="-1">Features <a class="header-anchor" href="#features-1" aria-label="Permalink to “Features”">​</a></h4><p><strong>✅ Fully Supported:</strong></p><ul><li>Display names for debugging</li><li>Filename prefixing in display names</li><li>Server-side rendering support</li><li>Template literal transpilation</li><li>CSS minification</li><li>Namespace prefixes</li><li>Pure annotations for call expressions</li></ul><p><strong>⚠️ Partially Supported:</strong></p><ul><li>Pure annotations (call expressions only, not tagged templates due to bundler limitations)</li></ul><p><strong>❌ Not Yet Implemented:</strong></p><ul><li>JSX css prop transformation</li><li>Custom import path handling</li></ul>`,48)]])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
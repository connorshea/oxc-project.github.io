import{C as e,k as t,n}from"./chunks/runtime-core.esm-bundler.C1BpllkC.js";import{b as r}from"./chunks/plugin-vue_export-helper.azUlBbF8.js";const i=JSON.parse(`{"title":"Parser","description":"","frontmatter":{"title":"Parser","outline":"deep"},"headers":[],"relativePath":"docs/learn/architecture/parser.md","filePath":"docs/learn/architecture/parser.md"}`),a={name:`docs/learn/architecture/parser.md`};function o(r,i,a,o,s,c){return e(),t(`div`,null,i[0]||=[n(`<h1 id="parser" tabindex="-1">Parser <a class="header-anchor" href="#parser" aria-label="Permalink to “Parser”">​</a></h1><p>Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.</p><p>As the parser often represents a key performance bottleneck in JavaScript tooling, any minor improvements can have a cascading effect on our downstream tools. By developing our parser, we have the opportunity to explore and implement well-researched performance techniques.</p><p>While many existing JavaScript tools rely on [estree] as their AST specification, a notable drawback is its abundance of ambiguous nodes. This ambiguity often leads to confusion during development with [estree].</p><p>The Oxc AST differs slightly from the [estree] AST by removing ambiguous nodes and introducing distinct types. For example, instead of using a generic [estree] <code>Identifier</code>, the Oxc AST provides specific types such as <code>BindingIdentifier</code>, <code>IdentifierReference</code>, and <code>IdentifierName</code>.</p><p>This clear distinction greatly enhances the development experience by aligning more closely with the ECMAScript specification.</p><h2 id="how-is-it-so-fast" tabindex="-1">How is it so fast <a class="header-anchor" href="#how-is-it-so-fast" aria-label="Permalink to “How is it so fast”">​</a></h2><ul><li>AST is allocated in a <a href="https://crates.io/crates/bumpalo" target="_blank" rel="noreferrer">memory arena</a> for fast AST memory allocation and deallocation</li><li>Short strings are inlined by <a href="https://crates.io/crates/compact_str" target="_blank" rel="noreferrer">CompactString</a></li><li>No other heap allocations are done except the above two</li><li>Scope binding, symbol resolution and some syntax errors are not done in the parser, they are delegated to the semantic analyzer</li></ul>`,8)])}var s=r(a,[[`render`,o]]);export{i as __pageData,s as default};
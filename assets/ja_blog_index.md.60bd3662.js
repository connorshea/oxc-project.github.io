import{_ as e,o as a,c as r,Q as s}from"./chunks/framework.725e5b03.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ja/blog/index.md","filePath":"ja/blog/index.md","lastUpdated":1701792041000}'),t={name:"ja/blog/index.md"},o=s(`<p><a href="https://github.com/rome/tools" target="_blank" rel="noreferrer">Rome</a> uses a different set of techniques for parsing JavaScript and TypeScript. This tutorial summarizes them in learning order for better understanding.</p><h2 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to &quot;History&quot;">​</a></h2><ul><li>The Rome codebase was rewritten from TypeScript to Rust, see <a href="https://rome.tools/blog/2021/09/21/rome-will-be-rewritten-in-rust" target="_blank" rel="noreferrer">Rome will be rewritten in Rust</a></li><li>The decision was made after talking to the author of <a href="https://github.com/rslint/rslint" target="_blank" rel="noreferrer">rslint</a> and <a href="https://github.com/rust-lang/rust-analyzer" target="_blank" rel="noreferrer">rust-analyzer</a></li><li>rust-analyzer proved that IDE-centric tools built around concrete syntax tree are possible</li><li>rslint proved that it is possible to write a JavaScript parser in Rust, with the same base libraries as rust-analyzer</li><li>Rome ported the rslint codebase to their own repository with permission from rslint&#39;s author</li></ul><h2 id="concrete-syntax-tree" tabindex="-1">Concrete Syntax Tree <a class="header-anchor" href="#concrete-syntax-tree" aria-label="Permalink to &quot;Concrete Syntax Tree&quot;">​</a></h2><ul><li>The base library is called <a href="https://github.com/rust-analyzer/rowan" target="_blank" rel="noreferrer">rowan</a>, see <a href="https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/syntax.md" target="_blank" rel="noreferrer">overview of rowan</a></li><li>Rowan, also known as red-green trees, is named after the real green <a href="https://en.wikipedia.org/wiki/Rowan" target="_blank" rel="noreferrer">rowan tree</a> that makes red berries</li><li>The origin of red-green trees is described in this <a href="https://ericlippert.com/2012/06/08/red-green-trees/" target="_blank" rel="noreferrer">blog post</a>, by the authors of the C# programming language</li><li>The whole point of rowan is to define a lossless concrete syntax tree (CST) that describes all the details of the source code and provides a set of traversal APIs (parent, children, siblings, etc)</li><li>Read the advantage of having a CST over an AST: <a href="https://rdambrosio016.github.io/rust/2020/09/18/pure-ast-based-linting-sucks.html" target="_blank" rel="noreferrer">Pure AST based linting sucks</a></li><li>CST provides the ability to build a fully recoverable parser</li></ul><h2 id="grammar" tabindex="-1">Grammar <a class="header-anchor" href="#grammar" aria-label="Permalink to &quot;Grammar&quot;">​</a></h2><ul><li>Just like an AST, we need to define the grammar. The grammar is auto-generated by using <a href="https://github.com/rome/tools/tree/main/xtask/codegen" target="_blank" rel="noreferrer">xtask/codegen</a></li><li>The grammar is generated from the <a href="https://github.com/rust-analyzer/ungrammar" target="_blank" rel="noreferrer">ungrammar</a> DSL</li><li>The input <code>ungrammar</code> source file is in <a href="https://github.com/rome/tools/blob/main/xtask/codegen/js.ungram" target="_blank" rel="noreferrer">xtask/codegen/js.ungram</a></li><li>The output of the codegen is in <a href="https://github.com/rome/tools/tree/main/crates/rome_js_syntax/src/generated" target="_blank" rel="noreferrer">rome_js_syntax/src/generated</a></li></ul><h2 id="entry-point" tabindex="-1">Entry Point <a class="header-anchor" href="#entry-point" aria-label="Permalink to &quot;Entry Point&quot;">​</a></h2><p>The Rome codebase is getting large and slightly difficult to find the parser entry point.</p><p>For first-time contributors, the <code>rome_cli</code> crate is the binary entry point for running the code:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rome_cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">touch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.js</span></span>
<span class="line"><span style="color:#B392F0;">cargo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rome_cli</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">check</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./test.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rome_cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">touch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.js</span></span>
<span class="line"><span style="color:#6F42C1;">cargo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rome_cli</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">check</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./test.js</span></span></code></pre></div><p><code>rome_cli</code> will eventually call <code>rome_js_parser::parse</code></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/rome/tools/blob/9815467c66688773bc1bb6ef9a5b2d86ca7b3682/crates/rome_js_parser/src/parse.rs#L178-L187</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/rome/tools/blob/9815467c66688773bc1bb6ef9a5b2d86ca7b3682/crates/rome_js_parser/src/parse.rs#L178-L187</span></span></code></pre></div><p>and finally the actual parsing code</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/rome/tools/blob/9815467c66688773bc1bb6ef9a5b2d86ca7b3682/crates/rome_js_parser/src/syntax/program.rs#L14-L17</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/rome/tools/blob/9815467c66688773bc1bb6ef9a5b2d86ca7b3682/crates/rome_js_parser/src/syntax/program.rs#L14-L17</span></span></code></pre></div><h2 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h2><ul><li><a href="https://github.com/rome/tools/blob/main/CONTRIBUTING.md" target="_blank" rel="noreferrer">CONTRIBUTING.md</a> has instructions on how to contribute</li><li><a href="https://rome.github.io/tools/rome_js_parser/index.html" target="_blank" rel="noreferrer">rome_js_parser crate doc</a> has some more details on the parser</li><li>See <a href="https://github.com/rome/tools/tree/main/xtask/codegen#cargo-codegen-test" target="_blank" rel="noreferrer"><code>cargo codegen test</code></a> for working with parser tests</li><li>See <a href="https://github.com/rome/tools/tree/main/xtask/coverage" target="_blank" rel="noreferrer"><code>cargo coverage</code></a> for working with conformance tests</li><li>Join the <a href="https://discord.com/invite/rome" target="_blank" rel="noreferrer">Discord Server</a> for inquiries</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The JavaScript / TypeScript parser is 99% complete, the best way to help is to test Rome in your own codebases or take a look at the <a href="https://github.com/rome/tools/issues" target="_blank" rel="noreferrer">issues on GitHub</a>.</p></div>`,18),n=[o];function l(i,p,c,h,d,b){return a(),r("div",null,n)}const u=e(t,[["render",l]]);export{m as __pageData,u as default};

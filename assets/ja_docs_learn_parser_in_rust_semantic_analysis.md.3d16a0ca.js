import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.725e5b03.js";const u=JSON.parse('{"title":"Semantic Analysis","description":"","frontmatter":{"title":"Semantic Analysis","outline":"deep"},"headers":[],"relativePath":"ja/docs/learn/parser_in_rust/semantic_analysis.md","filePath":"ja/docs/learn/parser_in_rust/semantic_analysis.md","lastUpdated":1702042266000}'),l={name:"ja/docs/learn/parser_in_rust/semantic_analysis.md"},o=p(`<h1 id="semantic-analysis" tabindex="-1">Semantic Analysis <a class="header-anchor" href="#semantic-analysis" aria-label="Permalink to &quot;Semantic Analysis&quot;">​</a></h1><p>Semantic analysis is the process of checking whether our source code is correct or not. We need to check against all the &quot;Early Error&quot; rules in the ECMAScript specification.</p><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>For grammar contexts such as <code>[Yield]</code> or <code>[Await]</code>, an error need to be raised when the grammar forbids them, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">BindingIdentifier[Yield, Await] :</span></span>
<span class="line"><span style="color:#e1e4e8;">  Identifier</span></span>
<span class="line"><span style="color:#e1e4e8;">  yield</span></span>
<span class="line"><span style="color:#e1e4e8;">  await</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">13.1.1 Static Semantics: Early Errors</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">BindingIdentifier[Yield, Await] : yield</span></span>
<span class="line"><span style="color:#e1e4e8;">* It is a Syntax Error if this production has a [Yield] parameter.</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">* BindingIdentifier[Yield, Await] : await</span></span>
<span class="line"><span style="color:#e1e4e8;">It is a Syntax Error if this production has an [Await] parameter.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">BindingIdentifier[Yield, Await] :</span></span>
<span class="line"><span style="color:#24292e;">  Identifier</span></span>
<span class="line"><span style="color:#24292e;">  yield</span></span>
<span class="line"><span style="color:#24292e;">  await</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">13.1.1 Static Semantics: Early Errors</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">BindingIdentifier[Yield, Await] : yield</span></span>
<span class="line"><span style="color:#24292e;">* It is a Syntax Error if this production has a [Yield] parameter.</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">* BindingIdentifier[Yield, Await] : await</span></span>
<span class="line"><span style="color:#24292e;">It is a Syntax Error if this production has an [Await] parameter.</span></span></code></pre></div><p>need to raise an error for</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#F97583;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> yield, await;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">async </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> yield, await;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span></code></pre></div><p>because <code>AsyncGeneratorDeclaration</code> has <code>[+Yield]</code> and <code>[+Await]</code> for <code>AsyncGeneratorBody</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">AsyncGeneratorBody :</span></span>
<span class="line"><span style="color:#e1e4e8;">  FunctionBody[+Yield, +Await]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">AsyncGeneratorBody :</span></span>
<span class="line"><span style="color:#24292e;">  FunctionBody[+Yield, +Await]</span></span></code></pre></div><p>An example in Rome checking for the <code>yield</code> keyword:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">https</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//github.com/rome/tools/blob/5a059c0413baf1d54436ac0c149a829f0dfd1f4d/crates/rome_js_parser/src/syntax/expr.rs#L1368-L1377</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">https</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//github.com/rome/tools/blob/5a059c0413baf1d54436ac0c149a829f0dfd1f4d/crates/rome_js_parser/src/syntax/expr.rs#L1368-L1377</span></span></code></pre></div><h2 id="scope" tabindex="-1">Scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;Scope&quot;">​</a></h2><p>For declaration errors:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">14.2.1 Static Semantics: Early Errors</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">Block : { StatementList }</span></span>
<span class="line"><span style="color:#e1e4e8;">* It is a Syntax Error if the LexicallyDeclaredNames of StatementList contains any duplicate entries.</span></span>
<span class="line"><span style="color:#e1e4e8;">* It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList also occurs in the VarDeclaredNames of StatementList.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">14.2.1 Static Semantics: Early Errors</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Block : { StatementList }</span></span>
<span class="line"><span style="color:#24292e;">* It is a Syntax Error if the LexicallyDeclaredNames of StatementList contains any duplicate entries.</span></span>
<span class="line"><span style="color:#24292e;">* It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList also occurs in the VarDeclaredNames of StatementList.</span></span></code></pre></div><p>We need to add a scope tree. A scope tree has all the <code>var</code>s and <code>let</code>s declared inside it. It is also a parent pointing tree where we want to navigate up the tree and search for binding identifiers in parent scopes. The data structure we can use is a <a href="https://docs.rs/indextree/latest/indextree/" target="_blank" rel="noreferrer"><code>indextree</code></a>.</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">indextree</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">Arena</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Node</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">NodeId</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bitflags</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">bitflags;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scopes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Arena</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Scope</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NodeId</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">bitflags!</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    #[derive(</span><span style="color:#B392F0;">Default</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeFlags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TOP</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">FUNCTION</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ARROW</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CLASS_STATIC_BLOCK</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">VAR</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Self</span><span style="color:#F97583;">::</span><span style="color:#79B8FF;">TOP</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">bits </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Self</span><span style="color:#F97583;">::</span><span style="color:#79B8FF;">FUNCTION</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">bits </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Self</span><span style="color:#F97583;">::</span><span style="color:#79B8FF;">CLASS_STATIC_BLOCK</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">bits;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Debug</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Clone</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scope</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /// [Strict Mode Code](https://tc39.es/ecma262/#sec-strict-mode-code)</span></span>
<span class="line"><span style="color:#6A737D;">    /// [Use Strict Directive Prologue](https://tc39.es/ecma262/#sec-directive-prologues-and-the-use-strict-directive)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> strict_mode</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bool</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> flags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeFlags</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// [Lexically Declared Names](https://tc39.es/ecma262/#sec-static-semantics-lexicallydeclarednames)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> lexical</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IndexMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Atom</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">SymbolId</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">FxBuildHasher</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// [Var Declared Names](https://tc39.es/ecma262/#sec-static-semantics-vardeclarednames)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> var</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IndexMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Atom</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">SymbolId</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">FxBuildHasher</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// Function Declarations</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> function</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IndexMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Atom</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">SymbolId</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">FxBuildHasher</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indextree</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">Arena</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">NodeId</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bitflags</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">bitflags;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scopes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arena</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Scope</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NodeId</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">bitflags!</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    #[derive(</span><span style="color:#6F42C1;">Default</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeFlags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">TOP</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">FUNCTION</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ARROW</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CLASS_STATIC_BLOCK</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">VAR</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Self</span><span style="color:#D73A49;">::</span><span style="color:#005CC5;">TOP</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">bits </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Self</span><span style="color:#D73A49;">::</span><span style="color:#005CC5;">FUNCTION</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">bits </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Self</span><span style="color:#D73A49;">::</span><span style="color:#005CC5;">CLASS_STATIC_BLOCK</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">bits;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Debug</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Clone</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scope</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /// [Strict Mode Code](https://tc39.es/ecma262/#sec-strict-mode-code)</span></span>
<span class="line"><span style="color:#6A737D;">    /// [Use Strict Directive Prologue](https://tc39.es/ecma262/#sec-directive-prologues-and-the-use-strict-directive)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> strict_mode</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bool</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> flags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeFlags</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// [Lexically Declared Names](https://tc39.es/ecma262/#sec-static-semantics-lexicallydeclarednames)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> lexical</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IndexMap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Atom</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">SymbolId</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">FxBuildHasher</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// [Var Declared Names](https://tc39.es/ecma262/#sec-static-semantics-vardeclarednames)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> var</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IndexMap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Atom</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">SymbolId</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">FxBuildHasher</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// Function Declarations</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> function</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IndexMap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Atom</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">SymbolId</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">FxBuildHasher</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The scope tree can either be built inside the parser for performance reasons, or built-in a separate AST pass.</p><p>Generally, a <code>ScopeBuilder</code> is needed:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeBuilder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    scopes</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scopes</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    root_scope_id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeId</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    current_scope_id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeId</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeBuilder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">current_scope</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">Scope</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">scopes[</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">current_scope_id]</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">enter_scope</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;mut</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, flags</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ScopeFlags</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // Inherit strict mode for functions</span></span>
<span class="line"><span style="color:#6A737D;">        // https://tc39.es/ecma262/#sec-strict-mode-code</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> strict_mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">scopes[</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">root_scope_id]</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">strict_mode;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parent_scope </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">current_scope</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">strict_mode</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parent_scope</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">flags</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">intersects</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ScopeFlags</span><span style="color:#F97583;">::</span><span style="color:#79B8FF;">FUNCTION</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> parent_scope</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">strict_mode</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            strict_mode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> scope </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Scope</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(flags, strict_mode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> new_scope_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">scopes</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">new_node</span><span style="color:#E1E4E8;">(scope);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">current_scope_id</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(new_scope_id, </span><span style="color:#F97583;">&amp;mut</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">scopes);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">current_scope_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> new_scope_id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">leave_scope</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;mut</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">current_scope_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">scopes[</span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">current_scope_id]</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parent</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeBuilder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    scopes</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scopes</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    root_scope_id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeId</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    current_scope_id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeId</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeBuilder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">current_scope</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">Scope</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">scopes[</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">current_scope_id]</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">enter_scope</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, flags</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScopeFlags</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // Inherit strict mode for functions</span></span>
<span class="line"><span style="color:#6A737D;">        // https://tc39.es/ecma262/#sec-strict-mode-code</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> strict_mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">scopes[</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">root_scope_id]</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">strict_mode;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parent_scope </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">current_scope</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">strict_mode</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parent_scope</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">flags</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">intersects</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ScopeFlags</span><span style="color:#D73A49;">::</span><span style="color:#005CC5;">FUNCTION</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> parent_scope</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">strict_mode</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            strict_mode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> scope </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scope</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(flags, strict_mode);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> new_scope_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">scopes</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">new_node</span><span style="color:#24292E;">(scope);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">current_scope_id</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(new_scope_id, </span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">scopes);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">current_scope_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> new_scope_id;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">leave_scope</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;mut</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">current_scope_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">scopes[</span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">current_scope_id]</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parent</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>We then call <code>enter_scope</code> and <code>leave_scope</code> accordingly inside the parse functions, for example in acorn:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//github.com/acornjs/acorn/blob/11735729c4ebe590e406f952059813f250a4cbd1/acorn/src/statement.js#L425-L437</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//github.com/acornjs/acorn/blob/11735729c4ebe590e406f952059813f250a4cbd1/acorn/src/statement.js#L425-L437</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>One of the downsides of this approach is that for arrow functions, we may need to create a temporary scope and then drop it afterwards if it is not an arrow function but a sequence expression. This is detailed in <a href="/docs/learn/ecmascript/grammar.html#cover-grammar">cover grammar</a>.</p></div><h3 id="the-visitor-pattern" tabindex="-1">The Visitor Pattern <a class="header-anchor" href="#the-visitor-pattern" aria-label="Permalink to &quot;The Visitor Pattern&quot;">​</a></h3><p>If we decide to build the scope tree in another pass for simplicity, then every node in the AST need to be visited in depth-first preorder and build the scope tree.</p><p>We can use the <a href="https://rust-unofficial.github.io/patterns/patterns/behavioural/visitor.html" target="_blank" rel="noreferrer">Visitor Pattern</a> to separate out the traversal process from the operations performed on each object.</p><p>Upon visit, we can call <code>enter_scope</code> and <code>leave_scope</code> accordingly to build the scope tree.</p>`,26),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{u as __pageData,h as default};

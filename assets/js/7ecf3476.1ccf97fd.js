"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[459],{4935:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(1527),i=n(7660);const s={id:"parser",title:"Parser"},a="Parser",o={id:"learn/architecture/parser",title:"Parser",description:"Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust.",source:"@site/docs/learn/architecture/parser.md",sourceDirName:"learn/architecture",slug:"/learn/architecture/parser",permalink:"/docs/learn/architecture/parser",draft:!1,unlisted:!1,editUrl:"https://github.com/oxc-project/oxc-project.github.io/tree/main/docs/learn/architecture/parser.md",tags:[],version:"current",frontMatter:{id:"parser",title:"Parser"},sidebar:"learn",previous:{title:"Introduction",permalink:"/docs/learn/architecture/intro"},next:{title:"Linter",permalink:"/docs/learn/architecture/linter"}},c={},l=[{value:"How is it so fast",id:"how-is-it-so-fast",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"parser",children:"Parser"}),"\n",(0,r.jsx)(t.p,{children:"Oxc maintains its own AST and parser, which is by far the fastest and most conformant JavaScript and TypeScript (including JSX and TSX) parser written in Rust."}),"\n",(0,r.jsx)(t.p,{children:"As the parser often represents a key performance bottleneck in JavaScript tooling,\nany minor improvements can have a cascading effect on our downstream tools.\nBy developing our parser, we have the opportunity to explore and implement well-researched performance techniques."}),"\n",(0,r.jsx)(t.p,{children:"While many existing JavaScript tools rely on [estree] as their AST specification,\na notable drawback is its abundance of ambiguous nodes.\nThis ambiguity often leads to confusion during development with [estree]."}),"\n",(0,r.jsxs)(t.p,{children:["The Oxc AST differs slightly from the [estree] AST by removing ambiguous nodes and introducing distinct types.\nFor example, instead of using a generic [estree] ",(0,r.jsx)(t.code,{children:"Identifier"}),",\nthe Oxc AST provides specific types such as ",(0,r.jsx)(t.code,{children:"BindingIdentifier"}),", ",(0,r.jsx)(t.code,{children:"IdentifierReference"}),", and ",(0,r.jsx)(t.code,{children:"IdentifierName"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"This clear distinction greatly enhances the development experience by aligning more closely with the ECMAScript specification."}),"\n",(0,r.jsx)(t.h2,{id:"how-is-it-so-fast",children:"How is it so fast"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["AST is allocated in a ",(0,r.jsx)(t.a,{href:"https://crates.io/crates/bumpalo",children:"memory arena"})," for fast AST memory allocation and deallocation"]}),"\n",(0,r.jsxs)(t.li,{children:["Short strings are inlined by ",(0,r.jsx)(t.a,{href:"https://crates.io/crates/compact_str",children:"CompactString"})]}),"\n",(0,r.jsx)(t.li,{children:"No other heap allocations are done except the above two"}),"\n",(0,r.jsx)(t.li,{children:"Scope binding, symbol resolution and some syntax errors are not done in the parser, they are delegated to the semantic analyzer"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7660:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var r=n(959);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);